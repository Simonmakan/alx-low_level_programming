!<arch>
0-isupper.c/    0           0     0     644     204       `
#include <ctype.h>
#include "main.h"
/**
 * _isupper - check uppercase
 * @c: xter
 * Return: 1 (upper) 0 (lower)
 */
int _isupper(int c)
{
int s = isupper(c);

if (s == 0)
return (s);
else
return (1);
}
0-memset.c/     0           0     0     644     236       `
#include "main.h"
/**
 *_memset - constant byte filling
 *
 *@s: adress
 *@b: const
 *@n: times
 *Return: address
 */
char *_memset(char *s, char b, unsigned int n)
{
unsigned int k;

for (k = 0; k < n; k++)
{
s[k] = b;
}
return (s);
}
0-strcat.c/     0           0     0     644     302       `
#include "main.h"
#include <string.h>
/**
 * _strcat - conc. no
 * @dest: string
 * @src: parameter
 * Return: dest
**/
char *_strcat(char *dest, char *src)
{
int dest_len = strlen(dest);
int i;

for (i = 0; src[i] != '\0'; i++)
dest[dest_len + i] = src[i];
dest[dest_len + i] = '\0';
return (dest);
}
100-atoi.c/     0           0     0     644     299       `
#include "main.h"
/**
 * _atoi - conv string to int
 *  @s: string name
 *  Return: void
 */
int _atoi(char *s)
{
int i = 1;
unsigned int num = 0;
do {
if (*s == '-')
i *= -1;
else if (*s >= '0' && *s <= '9')
num = num * 10 + (*s - '0');
else if (num > 0)
break;
} while (*s++);
return (num *i);
}


1-isdigit.c/    0           0     0     644     213       `
#include <ctype.h>
#include "main.h"

/**
 * _isdigit - digits checker
 *  * @c: xters
 * Return: 1 (digit) 0 (otherwise)
 */

int _isdigit(int c)
{
int s = isdigit(c);

if (s == 0)
return (s);
else
return (1);
}

1-memcpy.c/     0           0     0     644     305       `
#include "main.h"
/**
 *_memcpy - copy memory area
 *@dest: pointer (receiver)
 *@src: pointer (copied)
 *@n: x times to be copied
 *Return: (dest) project done well
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
unsigned int s;

for (s = 0; s < n; s++)
{
dest[s] = src[s];
}
return (dest);
}

1-strncat.c/    0           0     0     644     353       `
#include "main.h"
/**
 * _strncat - concatenates two strings
 * @dest: input parameter string
 * @src: input parameter string
 * @n: times to iterations
 * Return: dest
 */
char *_strncat(char *dest, char *src, int n)
{
int s, m;

s = 0;
while (dest[s] != 0)
{
s++;
}
m = 0;
while (src[m] != 0 && m < n)
{
dest[s] = src[m];
s++;
m++;
}
return (dest);
}

2-strchr.c/     0           0     0     644     228       `
#include "main.h"
/**
 *_strchr - locater
 *@s: pointer (address)
 *@c: xter
 *Return: (address)
 */
char *_strchr(char *s, char c)
{
char *m = s;

while (*m != 0 && *m != c)
{
m++;
}
if (*m != c)
{
return (0);
}
return (m);
}

2-strlen.c/     0           0     0     644     203       `
#include "main.h"

/**
 * _strlen - string length
 * @s: character
 * Return: void
 */
int _strlen(char *s)
{
int count, inc;
inc = 0;
for (count = 0; s[count] != '\0'; count++)
inc++;

return (inc);
}


2-strncpy.c/    0           0     0     644     326       `
#include "main.h"
/**
 * _strncpy - string copy
 * @dest: array that returns
 * @src: receive string
 * @n: no of times
 * Return: (dest)
 */
char *_strncpy(char *dest, char *src, int n)
{
int s;

s = 0;
while (s < n && src[s] != '\0')
{
dest[s] = src[s];
s++;
}
s = s;
while (s < n)
{
dest[s] = '\0';
s++;
}
return (dest);
}
3-islower.c/    0           0     0     644     220       `
#include "main.h"
/**
 * _islower - checks for lowercase characters
 * @c: - no of characters
 * Return: (1) (lower) and (0) (upper)
 */
int _islower(int c)
{
	if (c >= 97 && c <= 122)
	{
		return (1);
	}
	return (0);
}
3-puts.c/       0           0     0     644     187       `
#include "main.h"
/**
 * _puts - prints string
 * @str: name
 * Return: void
 */
void _puts(char *str)
{
int i;

for (i = 0; str[i] != '\0'; i++)
{
_putchar(str[i]);
}
_putchar('\n');
}


3-strcmp.c/     0           0     0     644     274       `
#include "main.h"
/**
 * _strcmp - two strings compararison
 * @s1: first string input
 * @s2: second string input
 * Return: 0 (project done)
 */
int _strcmp(char *s1, char *s2)
{
int s = 0, m = 0;

while (s1[s] != '\0' && m == 0)
{
m = s1[s] - s2[s];
s++;
}
return (m);
}
3-strspn.c/     0           0     0     644     328       `
#include "main.h"
/**
 *_strspn - length substring
 *@s: pointer 1
 *@accept: pointer (substring)
 *Return: (length)
 */
unsigned int _strspn(char *s, char *accept)
{
int m, n, p;

for (m = 0; s[m] != 0; m++)
{
n = 0;
for (p = 0; accept[p] != 0; p++)
{
if (s[m] == accept[p])
{
n = 1;
}
}
if (n == 0)
{
break;
}
}
return (m);
}
4-isalpha.c/    0           0     0     644     234       `
#include "main.h"
/**
 * _isalpha - checks apha characters
 * @c: -no of xters
 * Return: (1) loer / upper (0) otherwise
 */
int _isalpha(int c)
{
	if ((c >= 65 && c <= 90) || (c >= 97 && c <= 122))
	{
		return (1);
	}
	return (0);
}
4-strpbrk.c/    0           0     0     644     279       `
#include "main.h"

/**
 *_strpbrk - search
 *@s: pointer (address)
 *@accept: pointer (string)
 *Return: (addres)
 */
char *_strpbrk(char *s, char *accept)
{
int m;

while (*s != 0)
{
for (m = 0; accept[m] != 0; m++)
{
if (*s == accept[m])
{
return (s);
}
}
s++;
}
return (0);
}

5-strstr.c/     0           0     0     644     507       `
#include "main.h"
/**
 *_strstr - locates a substring within a string
 *@haystack: pointer (address)
 *@needle: pointer (string)
 *Return: 0 (done)
 */
char *_strstr(char *haystack, char *needle)
{
int i = 0;
int j = 0;
int a;
int compare = 0;

if (*needle == 0)
{
return (haystack);
}
while (haystack[i] != 0)
{
j = 0;
a = i;
while (needle[j] != 0)
{
if (needle[j] == haystack[a])
{
compare = 1;
}
else
{
compare = 0;
break;
}
j++;
a++;
}
if (compare == 1)
{
return (haystack + i);
}
i++;
}
return (0);
}


6-abs.c/        0           0     0     644     215       `
#include "main.h"
/**
 * _abs  - computes absolute value
 * @c: no of values
 * Return: (1)posiyive (-1) negative
 */
int _abs(int c)

{
	if (c < 0)
	{
		int abs_val = c * -1;

		return (abs_val);
	}
	return (c);
}

9-strcpy.c/     0           0     0     644     255       `
#include "main.h"
/**
 * char *_strcpy - copies sting pointed
 * @dest: buffer pointed
 * @src: null terminate
 * Return: void
 */
char *_strcpy(char *dest, char *src)
{
char *guard = dest;

while (*src)
{
*dest++ = *src++;
*dest = 0;
}
return (guard);
}

main.c/         0           0     0     644     148       `
#include "main.h"

int main(void)
{
    _puts("\"At the end of the day, my goal was to be the best hacker\"\n\t- Kevin Mitnick");
    return (0);
}
_putchar.c/     0           0     0     644     247       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

